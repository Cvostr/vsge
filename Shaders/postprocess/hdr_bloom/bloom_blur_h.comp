#version 450

layout(set=0, binding=0, rgba16f) readonly uniform image2D inputTexture;
layout(set=0, binding=1, rgba16f) restrict writeonly uniform image2D outputTexture;

const float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

layout(local_size_x=8, local_size_y=8) in;
void main(void)
{
    ivec2 size = ivec2(imageSize(outputTexture));
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    if(pixel.x <= size.x && pixel.y <= size.y){
        vec3 result = imageLoad(inputTexture, pixel).rgb * weight[0]; 
        for(int i = 1; i < 5; ++i)
        {
            result += imageLoad(inputTexture, pixel + ivec2(i, 0)).rgb * weight[i];
            result += imageLoad(inputTexture, pixel - ivec2(i, 0)).rgb * weight[i];
        }

        imageStore(outputTexture, pixel, vec4(result, 0));
    }
}