#version 450

layout(set=0, binding=0) uniform sampler2D positions;
layout(set=0, binding=1) uniform sampler2D normals;
layout(set=0, binding=2) uniform sampler2D noise;

layout (std140, set = 0, binding = 3) uniform Buffer{
    vec3 samples[64];
    mat4 view;
    mat4 projection;
};

layout(set=0, binding=4, rgba8) restrict writeonly uniform image2D outputTexture;

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main(void)
{
    vec2 size = imageSize(outputTexture);
	vec2 pixel = gl_GlobalInvocationID.xy;

    vec2 noise_uv_scale = size / 4.0;

    if(pixel.x <= size.x && pixel.y <= size.y){
        vec2 uv = pixel / size;

        vec4 pos = texture(positions, uv);
        if(pos.a == 1.0){
            imageStore(outputTexture, ivec2(pixel), vec4(0, 0, 0, 1));
            return;
        }
        vec3 fragPos = pos.xyz;
        fragPos = (view * vec4(fragPos, 1)).xyz;
        vec3 normal = normalize(texture(normals, uv).rgb);
        vec3 randomVec = texture(noise, uv * noise_uv_scale).xyz;  

        vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
        vec3 bitangent = cross(normal, tangent);
        mat3 TBN = mat3(tangent, bitangent, normal);

        int kernelSize = 64;
        float radius = 0.5;
        float bias = 0.08;

        float occlusion = 0.0;
        for(int i = 0; i < kernelSize; ++i){
            vec3 samplePos = TBN * samples[i]; // from tangent to view-space
            samplePos = fragPos + samplePos * radius; 
            vec4 offset = vec4(samplePos, 1.0);
            offset      = projection * offset;    
            offset.xyz /= offset.w;               
            offset.xyz  = offset.xyz * 0.5 + 0.5;
            float sampleDepth = (view * vec4(texture(positions, offset.xy).rgb, 1)).z;  
            float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
            occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;       
        }
        occlusion = 1.0 - (occlusion / kernelSize); 

        imageStore(outputTexture, ivec2(pixel), vec4(occlusion, 0, 0, 1));   
    }
}