#pragma once

#include <Core/Disposable.hpp>
#include <Core/Base.hpp>
#include <string>

namespace Mpi {
    class InputStream : public Disposable {
    public:

        InputStream() {

        }

        virtual ~InputStream() {
            
        }

        /// @brief Считать один байт из потока, если достигнут конец потока, то сразу возвращает -1. Блокирует текущую нить до момента, пока в потоке не появятся данные или не достигнут конец потока
        /// @return Считанный байт, -1, если достигнут конец потока
        /// @exception Exception, если произошла ошибка при чтении
        virtual int read() = 0;

        /// @brief Считать из потока указанное количество байт. Возвращает количество реально прочитанных байт. Блокирует текущую нить до момента, пока в потоке не появятся данные или не достигнут конец потока
        /// @param buffer буфер в памяти, куда производить чтение
        /// @param len количество байт, которые нужно попытаться считать
        /// @return реальное количество считанных байт
        virtual int32_t read(char* buffer, int32_t len) = 0;

        /// @brief Считать строку из потока, данные считываются до тех пор, пока не встретится перенос строки. Блокирует текущую нить до момента, пока в потоке не появятся данные или не достигнут конец потока
        /// @return Считанная строка из потока
        /// @exception Exception, если произошла ошибка при чтении
        std::string readln();

        virtual int64_t seek(StreamSeekDir direction, int64_t offset) = 0;

        /// @brief Получить текущую позицию в байтах у данного потока данных
        /// @return текущее смещение данного потока
        int64_t tell();
    };
}